1. root@k8s-control-plane:~/code# kubectl apply -f 1-pod.yaml
Error from server (BadRequest): error when creating "1-pod.yaml": pod in version "v1" cannot be handled as a Pod: no kind "pod" is registered for version "v1" in scheme "k8s.io/kubernetes/pkg/api/legacyscheme/scheme.go:30"

First letter of resource name should be capital - kind: Pod

2. root@k8s-control-plane:~/code# kubectl apply -f 1-deployment.yaml
error: unable to recognize "1-deployment.yaml": no matches for kind "Deployment" in version "v1"

apiVersion: v1  to  apiVersion: apps/v1

3. node/57662ab7c71c.mylabserver.com cordoned
error: unable to drain node "57662ab7c71c.mylabserver.com", aborting command...

There are pending nodes to be drained:
 57662ab7c71c.mylabserver.com
error: cannot delete DaemonSet-managed Pods (use --ignore-daemonsets to ignore): kube-system/calico-node-xlb9f, kube-system/kube-proxy-r2pnc

4. cloud_user_p_15e9576   n:3{ekS2Mob/MTO

AMD - n2d-standard-4 (4 vCPUs, 16 GB memory, 200GB )  -  265.40 
Intel - n2-custom-4-16384 (4 vCPUs, 16 GB memory, 200GB ) - 265.91 

5. kubectl create -f 2-pod.yaml

Error from server (AlreadyExists): error when creating "2-pod.yaml": pods "my-pod" already exists

Use apply 


6. cloud_user@k8s-control-plane:~$ kubectl get po
The connection to the server localhost:8080 was refused - did you specify the right host or port?

root@k8s-control-plane:~# kubectl get po
NAME                             READY   STATUS    RESTARTS   AGE
my-deployment-57d86476b6-89gwc   1/1     Running   1          23h
my-deployment-57d86476b6-dbnpz   1/1     Running   1          23h
my-deployment-57d86476b6-nbf66   1/1     Running   1          23h

root@k8s-control-plane:~# kubectl cluster-info
Kubernetes control plane is running at https://172.31.118.117:6443
KubeDNS is running at https://172.31.118.117:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy

To further debug and diagnose cluster problems, use 'kubectl cluster-info dump'.

root@k8s-control-plane:~/code# kubectl apply -f 9-always-pod.yaml
The Pod "always-pod" is invalid: spec: Forbidden: pod updates may not change fields other than `spec.containers[*].image`, `spec.initContainers[*].image`, `spec.activeDeadlineSeconds` or `spec.tolerations` (only additions to existing tolerations)
  core.PodSpec{
        ... // 2 identical fields
        Containers:                    {{Name: "busybox", Image: "busybox", Command: {"sh", "-c", "sleep 10"}, VolumeMounts: {{Name: "default-token-7wfzk", ReadOnly: true, MountPath: "/var/run/secrets/kubernetes.io/serviceaccount"}}, ...}},
        EphemeralContainers:           nil,
-       RestartPolicy:                 "Always",
+       RestartPolicy:                 "Never",
        TerminationGracePeriodSeconds: &30,
        ActiveDeadlineSeconds:         nil,
        ... // 23 identical fields
  }



7. cloud_user@linuxraja-kubemaster:~/code$ kubectl apply -f frontend01.yml
error: error validating "frontend01.yml": error validating data: [ValidationError(Deployment.spec.template.spec.containers[0].ports[0]): unknown field "volumeMounts" in io.k8s.api.core.v1.ContainerPort, ValidationError(Deployment.spec.template): unknown field "volumes" in io.k8s.api.core.v1.PodTemplateSpec]; if you choose to ignore these errors, turn validation off with --validate=false

Wrong indentation. The volumes key should be at the same level as containers.

8. cloud_user@linuxraja-kubemaster:~/code$ kubectl apply -f frontend01.yml
deployment.apps/frontend01-deployment created
The Service "frontend01-ser" is invalid: spec.ports[0].nodePort: Invalid value: 8080: provided port is not in the valid range. The range of valid ports is 30000-32767

9. cloud_user@linuxraja-kubemaster:~/code/wordpress01$ kubectl apply -f 3-wordpress01-pvc.yaml
Error from server (Forbidden): error when applying patch:
{"metadata":{"annotations":{"kubectl.kubernetes.io/last-applied-configuration":"{\"apiVersion\":\"v1\",\"kind\":\"PersistentVolumeClaim\",\"metadata\":{\"annotations\":{},\"name\":\"wordpress01-pvc\",\"namespace\":\"default\"},\"spec\":{\"accessModes\":[\"ReadWriteOnce\"],\"resources\":{\"requests\":{\"storage\":\"1Gi\"}},\"storageClassName\":\"localdisk\"}}\n"}},"spec":{"resources":{"requests":{"storage":"1Gi"}}}}
to:
Resource: "/v1, Resource=persistentvolumeclaims", GroupVersionKind: "/v1, Kind=PersistentVolumeClaim"
Name: "wordpress01-pvc", Namespace: "default"
for: "3-wordpress01-pvc.yaml": persistentvolumeclaims "wordpress01-pvc" is forbidden: only dynamically provisioned pvc can be resized and the storageclass that provisions the pvc must support resize
